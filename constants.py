##########################
# 1 QUBIT ENCODED IN [[7,1,3]] STEANE CODE
##########################

#A for Steane code (A=Ce)
codeInfo = "[[7,1,3]] 'STEANE' code"
A=[]
A.append([0,0,0,0,0,0,0,0,0,0,0,0,1,1])
A.append([0,0,0,0,0,0,0,0,0,0,0,1,0,1])
A.append([0,0,0,0,0,0,0,0,0,0,1,0,0,1])
A.append([0,1,1,1,1,1,1,0,0,0,0,0,0,0])
A.append([1,0,1,1,1,1,1,0,0,0,0,0,0,0])
A.append([1,1,0,1,1,1,1,0,0,0,0,0,0,0])
A.append([1,1,1,1,1,1,1,0,0,0,0,0,0,0])
A.append([1,0,0,1,1,0,1,0,0,0,0,0,0,0])
A.append([0,1,0,1,0,1,1,0,0,0,0,0,0,0])
A.append([0,0,1,0,1,1,1,0,0,0,0,0,0,0])
A.append([0,0,0,0,0,0,0,1,0,0,1,1,0,1])
A.append([0,0,0,0,0,0,0,0,1,0,1,0,1,1])
A.append([0,0,0,0,0,0,0,0,0,1,0,1,1,1])
A.append([0,0,0,0,0,0,0,1,1,1,1,1,1,1])

# #B for Hadamard on Steane code (B=Ce_inv*C0_inv)
# B=[]
# B.append([0,0,0,1,0,0,0,0,0,0,0,0,0,1])
# B.append([0,0,0,0,1,0,0,0,0,0,0,0,0,1])
# B.append([0,0,0,0,0,1,0,0,0,0,0,0,0,1])
# B.append([0,0,0,1,1,0,0,0,0,1,0,0,0,1])
# B.append([0,0,0,1,0,1,0,0,1,0,0,0,0,1])
# B.append([0,0,0,0,1,1,0,1,0,0,0,0,0,1])
# B.append([0,0,0,1,1,1,0,1,1,1,0,0,0,1])
# B.append([1,0,0,0,0,0,1,0,0,0,0,1,1,0])
# B.append([0,1,0,0,0,0,1,0,0,0,1,0,1,0])
# B.append([0,0,1,0,0,0,1,0,0,0,1,1,0,0])
# B.append([1,1,0,0,0,0,1,0,0,0,1,1,1,0])
# B.append([1,0,1,0,0,0,1,0,0,0,1,1,1,0])
# B.append([0,1,1,0,0,0,1,0,0,0,1,1,1,0])
# B.append([1,1,1,0,0,0,1,0,0,0,1,1,1,0])
#

# #B for Phase on Steane code (B=Ce_inv*C0_inv)
# B=[]
# B.append([0,0,0,1,0,0,1,0,0,0,0,0,0,0])
# B.append([0,0,0,0,1,0,1,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,1,1,0,0,0,0,0,0,0])
# B.append([0,0,0,1,1,0,1,0,0,1,0,0,0,0])
# B.append([0,0,0,1,0,1,1,0,1,0,0,0,0,0])
# B.append([0,0,0,0,1,1,1,1,0,0,0,0,0,0])
# B.append([0,0,0,1,1,1,1,1,1,1,0,0,0,0])
# B.append([1,0,0,0,0,0,1,0,0,0,0,1,1,1])
# B.append([0,1,0,0,0,0,1,0,0,0,1,0,1,1])
# B.append([0,0,1,0,0,0,1,0,0,0,1,1,0,1])
# B.append([1,1,0,0,0,0,1,0,0,0,1,1,1,1])
# B.append([1,0,1,0,0,0,1,0,0,0,1,1,1,1])
# B.append([0,1,1,0,0,0,1,0,0,0,1,1,1,1])
# B.append([1,1,1,0,0,0,1,0,0,0,1,1,1,1])

##########################
# 2 QUBITs ENCODED IN [[7,1,3]] STEANE CODE
##########################

# #A for Steane code (A=Ce)
# A=[]
# #symplectic partners for first logical qubit
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0])
# A.append([0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# #symplectic partners for second logical qubit
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1])
# A.append([0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# #logical X for first logical qubit
# A.append([1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# #logical X for second logical qubit
# A.append([0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# #stabilizer generators for first logical qubit
# A.append([1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0])
# #stabilizer generators for second logical qubit
# A.append([0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1])
# #logical Z for first logical qubit
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0])
# #logical Z for second logical qubit
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1])
# 
# #B for CNOT between to qubits encoded in Steane code (B=Ce_inv*C0_inv)
# B=[]
# B.append([0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0])
# B.append([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0])
# B.append([0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0])
# B.append([0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0])
# B.append([1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0])
# B.append([1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0])
# B.append([0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0])
# B.append([1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0])
# B.append([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1])
# B.append([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1])
# B.append([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1])
# B.append([0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1])
# B.append([0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1])
# B.append([0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1])
# B.append([0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1])
# 

# the above entry was printed in MATLAB:
# for i=1:28
# fprintf('B.append([')
# fprintf(strcat(repmat('%i,',1,27),'%i'),B(i,:))
# fprintf('])\n')
# end

##########################
# 3 QUBIT ENCODED IN [[8,3,3]] CODE
# A=[]
# #Symplectic Partners
# A.append([0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0])
# A.append([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# A.append([0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1])
# A.append([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
# A.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0])
# #Logical X operators
# A.append([0,0,0,1,0,1,1,1,0,0,1,0,1,1,0,1])
# A.append([0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1])
# A.append([0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1])
# #Stabilizer generators
# A.append([1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1])
# A.append([0,0,0,1,0,1,1,1,1,0,1,0,0,1,1,0])
# A.append([0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0])
# A.append([0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1])
# A.append([0,0,1,1,1,0,1,0,0,0,0,1,0,1,1,1])
# #Logical Z operators
# A.append([0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0])
# A.append([0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1])
# A.append([0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0])
##########################
# 

# 
# #B for CNOT logical qubit 1 to logical qubit 2
# B=[]
# B.append([0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([1,1,1,0,0,0,0,1,1,0,0,0,1,1,0,1])
# B.append([0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0])
# B.append([1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1])
# B.append([1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,1])
# B.append([0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0])
# B.append([1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,1])
# B.append([1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0])
# B.append([0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0])
# B.append([0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0])
# B.append([1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0])
# B.append([0,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0])
# B.append([1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0])
# B.append([1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0])


# the above lines to generate B printed in MATLAB:
# for i=1:16
# fprintf('B.append([')
# fprintf(strcat(repmat('%i,',1,15),'%i'),B(i,:))
# fprintf('])\n')
# end

##########################
# 1 QUBIT ENCODED IN [[4,2]] CODE
##########################
#############
# #A for [[4,2]] code
# A=[]
# A.append([0,0,0,1,0,0,0,0])
# A.append([0,0,0,0,1,1,1,0])
# A.append([1,1,0,0,0,0,0,0])
# A.append([1,0,1,0,0,0,0,0])
# A.append([0,0,0,0,1,1,1,1])
# A.append([1,1,1,1,0,0,0,0])
# A.append([0,0,0,0,1,0,1,0])
# A.append([0,0,0,0,1,1,0,0])
#  
# #B for NSCNOT from qubit 1 to qubit 2 in [[4,2]] code (B=Ce_inv*C0_inv)
# B=[]
# B.append([1,0,1,0,0,1,0,0])
# B.append([1,0,0,1,0,1,0,0])
# B.append([1,0,1,1,0,1,0,0])
# B.append([1,0,0,0,0,0,0,0])
# B.append([0,1,0,0,0,0,0,1])
# B.append([0,1,0,0,0,0,1,0])
# B.append([0,1,0,0,0,0,1,1])
# B.append([0,1,0,0,1,0,0,0])

# #C0 for CNOT from qubit 1 to qubit 2 in [[4,2]] code
# C0=[]
# C0.append([1,0,0,0,0,0,0,0])
# C0.append([0,1,0,0,0,0,0,0])
# C0.append([0,0,1,1,0,0,0,0])
# C0.append([0,0,0,1,0,0,0,0])
# C0.append([0,0,0,0,1,0,0,0])
# C0.append([0,0,0,0,0,1,0,0])
# C0.append([0,0,0,0,0,0,1,0])
# C0.append([0,0,0,0,0,0,1,1])

# #B for Hadamard on locigcal qubit 2 in [[4,2]] code
# B=[]
# B.append([1,0,1,0,0,1,0,1])
# B.append([1,0,0,0,0,1,0,1])
# B.append([1,0,1,0,0,1,0,0])
# B.append([1,0,0,0,0,0,0,0])
# B.append([0,1,0,1,0,0,1,0])
# B.append([0,1,0,0,0,0,1,0])
# B.append([0,1,0,1,0,0,0,0])
# B.append([0,1,0,0,1,0,0,0])

# #B' for Phase on logical qubit 1 in [[4,2]] code
# B=[]
# B.append([1,1,1,1,0,0,0,0])
# B.append([0,0,0,0,1,1,1,1])
# B.append([1,0,1,0,0,0,0,0])
# B.append([1,1,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,1])
# B.append([1,1,1,0,0,0,0,0])
# B.append([1,0,1,0,1,1,0,0])
# B.append([0,0,0,0,1,0,1,0])

# ##########################
# # 2 QUBITS ENCODED IN [[4,2]] CODE
# ##########################
# #A for 2-qubits encoded in the [[4,2]] code
# #A=Ce
# A=[]
# A.append([0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0])
# A.append([1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0])
# A.append([1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0])
# A.append([0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1])
# A.append([0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0])
# A.append([0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0])
# 
# ###Ce_inv
# B=[]
# B.append([1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0])
# B.append([1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0])
# B.append([1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0])
# B.append([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0])
# B.append([0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0])
# B.append([0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0])
# B.append([0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0])
# B.append([0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0])
# B.append([0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0])
# B.append([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1])
# B.append([0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0])
# B.append([0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1])
# B.append([0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0])
# 
# ###C0
# C0=[]
# B.append([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
# B.append([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])